" Must be first line -- use vim settings
set nocompatible

" --- Vundle ---
filetype off

if has('unix')
    if has('mac') || has('gui_mac') || has('gui_macvim')
        let g:vimrc_os = 'mac'
    else
        let g:vimrc_os = 'linux'
    end
else
    let g:vimrc_os = 'windows'
end

" init vim-plug
call plug#begin('~/.vim-plug')

if g:vimrc_os == 'mac'
    Plug 'rizzatti/dash.vim'
endif

Plug 'airblade/vim-gitgutter'
Plug 'cespare/vim-toml'
Plug 'christoomey/vim-tmux-navigator'
Plug 'earthly/earthly.vim', {'branch': 'main'}
Plug 'evanleck/vim-svelte', {'branch': 'main'}
Plug 'dracula/vim', { 'name': 'dracula' }
Plug 'fatih/vim-go'
Plug 'https://gn.googlesource.com/gn', { 'rtp': 'misc/vim' }
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'leafgarland/typescript-vim'
Plug 'lifepillar/vim-solarized8'
Plug 'mattn/gist-vim'
Plug 'mhinz/vim-startify'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'neoclide/coc.nvim', {'do': 'yarn install --frozen-lockfile'}
Plug 'pangloss/vim-javascript'
Plug 'pest-parser/pest.vim'
Plug 'plasticboy/vim-markdown'
Plug 'rust-lang/rust.vim'
Plug 'ryanoasis/vim-devicons'
Plug 'preservim/nerdcommenter'
Plug 'scrooloose/nerdtree'
Plug 'suan/vim-instant-markdown'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-surround'
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'voldikss/vim-floaterm'
Plug 'Xuyuanp/nerdtree-git-plugin'

call plug#end()
filetype plugin indent on    " required

" --- END Vundle ---

" clear all autocmds
autocmd!

" Automatically reload vimrc when it's saved
autocmd! BufWritePost ~/.vimrc so ~/.vimrc

" Pathogen
runtime bundle/vim-pathogen/autoload/pathogen.vim
call pathogen#infect()
call pathogen#helptags()

" Misc config
syntax on
syntax enable
filetype plugin indent on
filetype on
scriptencoding utf-8
set encoding=UTF-8

" trying to speed up ruby
set ttyfast
set lazyredraw
autocmd FileType ruby setlocal ts=2 sts=2 sw=2 norelativenumber nocursorline


set list
set listchars=tab:»·,trail:·
set mouse=a

autocmd FileType go set nolist

if !has('nvim')
  set ttymouse=xterm2
endif

set shortmess+=filmnrxoOtT
set viewoptions=folds,options,cursor,unix,slash
set history=1000
set background=dark
set nu
set showmatch
set incsearch
set hlsearch
set ignorecase
set smartcase
set wildmenu
set wildmode=list:longest,full
set whichwrap=b,s,h,l
set foldenable
set nowrap
set autoindent
set pastetoggle=<F12>
set termguicolors
set exrc

" Tell vim to remember certain things when we exit
" "  '10  :  marks will be remembered for up to 10 previously edited files
" "  "100 :  will save up to 100 lines for each register
" "  :20  :  up to 20 lines of command-line history will be remembered
" "  %    :  saves and restores the buffer list
set viminfo='10,\"100,:20,%

set background=dark
set fillchars+=vert:\ 
autocmd vimenter * ++nested colorscheme solarized8
let g:solarized_extra_hi_groups=1

" Forces use of the system clipboard in OS X
set clipboard+=unnamed

if g:vimrc_os == 'linux'
    set clipboard=unnamedplus
end

set tabpagemax=15
set showmode
set cursorline
set guifont=Monaco:h14

nnoremap Y y$
cmap cwd lcd %:p:h

" Highlight the 100 char column
set colorcolumn=100

" Highlight .jsm files as Javascript
au BufNewFile,BufRead *.jsm set filetype=javascript

" gdbinit.symlink -> gdb
au BufNewFile,BufRead gdbinit.symlink set filetype=gdb

" Rust
au BufNewFile,BufRead *.rs setfiletype rust
if g:vimrc_os == 'mac'
    let g:rust_clip_command = 'pbcopy'
elseif g:vimrc_os == 'linux'
    let g:rust_clip_command = 'xclip -selection clipboard'
end

let g:rustfmt_autosave = 1

" Go
au BufNewFile,BufRead *.go set filetype=go

" Arduino
au BufNewFile,BufRead *.ino set filetype=cpp

au BufNewFile,BufRead *.jinja set filetype=jinja

au BufNewFile,BufRead *.lic set filetype=ruby

" disable audio / visual bell
set noerrorbells visualbell t_vb=
autocmd GUIEnter * set visualbell t_vb=

if has("gui_macvim")
    set fuoptions=maxvert,maxhorz
    au GUIEnter * set fullscreen
endif

" Turn Off Swap Files
" ===================
set noswapfile
set nobackup
set nowritebackup

" Completion
" ==========

set wildmode=list:longest
set wildmenu " Enable ctrl-n and ctrl-p to scroll thru matches
set wildignore=*.o,*.obj,*~ " Stuff to ignore when tab completing
set wildignore+=*vim/backups*

" Scrolling
" =========

" Start scrolling when we're getting close to margins
set scrolloff=5
set sidescrolloff=5
set sidescroll=1

" how often vim writes to swap, updates UI plugins, etc
set updatetime=100

" Windows
" ==========
" make all windows the same size when adding/removing windows
set equalalways
" always vertical-split to the right
set splitright
" always horizontal-split to the bottom
set splitbelow

" easier navigation between split windows
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Tlist settings
let Tlist_Ctags_Cmd='/usr/local/bin/ctags'
"map <F4> :TlistToggle<cr>
"map <F5> :!/usr/local/bin/ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

" NERDTree settings
map <F2> :NERDTreeToggle \| :silent NERDTreeMirror<CR>
map <leader>r :NERDTreeFind<cr>

let g:NERDTreeIgnore = ['\.pyc$', '\.egg-info$', 'objdir-.*$[[dir]]', '_virtualenv[[dir]]']
let g:NERDTreeMapOpenVSplit = "v"
let g:NERDTreeMapJumpNextSibling = ""
let g:NERDTreeMapJumpPrevSibling = ""
let g:NERDTreeWinSize = 60
let g:NERDTreeShowBookmarks = 1
let g:WebDevIconsNerdTreeBeforeGlyphPadding = ''
let g:WebDevIconsUnicodeDecorateFolderNodes = v:true

" NERDCommenter settings
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1

" gitgutter settings
let g:gitgutter_sign_added = '▎'
let g:gitgutter_sign_modified = '▎'
let g:gitgutter_sign_removed = '▎'
let g:gitgutter_sign_removed_first_line = '▎'
let g:gitgutter_sign_modified_removed = '▎'

" CtrlP settings
set wildignore+=*/objdir-*/*,*/.git/*,*/.hg/*,*/_virtualenv/*
set wildignore+=*.pyc

" vim-airline
let g:airline_theme='solarized_flood'
let g:airline_powerline_fonts = 1

" Syntastic settings
let g:syntastic_always_populate_loc_list = 0
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

let g:indent_guides_enable_on_vim_startup = 1
let g:indent_guides_auto_colors = 0

let g:instant_markdown_autostart = 0

autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=8
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=0
hi Terminal ctermbg=0

set foldcolumn=1
set foldlevel=20

" yaml
au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml foldmethod=indent
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

" FZF
" [Buffers] Jump to the existing window if possible
map <c-p> :FZF<cr>
map <leader>f :Files<cr>
map <leader>b :Buffers<cr>

let g:fzf_buffers_jump = 1
let g:fzf_colors =
\ { 'gutter': ['bg', 'LineNr'],
\   'bg+': ['bg', 'IncSearch'],
\   'fg+': ['fg', 'IncSearch']
\ }

" Floaterm
let g:floaterm_keymap_new    = '<F7>'
let g:floaterm_keymap_prev   = '<F8>'
let g:floaterm_keymap_next   = '<F9>'
let g:floaterm_keymap_toggle = '<F12>'

" vim-go
let g:go_def_mapping_enabled = 0
